openapi: 3.0.3
info:
  title: Mymount
  version: 1.0.0
  description: Mymount
paths:
  /api/comment/:
    get:
      operationId: api_comment_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: query
        name: page
        schema:
          type: string
        description: Page
        required: true
      - in: query
        name: start
        schema:
          type: integer
        description: Comments tree start
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCommentList'
          description: ''
    post:
      operationId: api_comment_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
  /api/comment/{id}/:
    get:
      operationId: api_comment_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
    put:
      operationId: api_comment_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      - in: query
        name: like
        schema:
          type: string
        description: Like item
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
    patch:
      operationId: api_comment_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedComment'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
    delete:
      operationId: api_comment_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/gallery/:
    get:
      operationId: api_gallery_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedGalleryList'
          description: ''
    post:
      operationId: api_gallery_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Gallery'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gallery'
          description: ''
  /api/gallery/{id}/:
    get:
      operationId: api_gallery_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this gallery.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gallery'
          description: ''
    put:
      operationId: api_gallery_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this gallery.
        required: true
      - in: query
        name: like
        schema:
          type: string
        description: Like item
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Gallery'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gallery'
          description: ''
    patch:
      operationId: api_gallery_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this gallery.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedGallery'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gallery'
          description: ''
    delete:
      operationId: api_gallery_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this gallery.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/order/:
    get:
      operationId: api_order_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: query
        name: productType
        schema:
          type: string
        description: Order productType
      - in: query
        name: status
        schema:
          type: integer
        description: Orders status not equal to given
      - in: query
        name: user
        schema:
          type: integer
        description: User
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderList'
          description: ''
    post:
      operationId: api_order_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
  /api/order/{id}/:
    get:
      operationId: api_order_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    put:
      operationId: api_order_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    patch:
      operationId: api_order_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    delete:
      operationId: api_order_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/product/:
    get:
      operationId: api_product_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: query
        name: productType
        schema:
          type: string
        description: Product type
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductList'
          description: ''
    post:
      operationId: api_product_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/product/{id}/:
    get:
      operationId: api_product_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    put:
      operationId: api_product_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    patch:
      operationId: api_product_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    delete:
      operationId: api_product_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/shop/:
    get:
      operationId: api_shop_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedShopList'
          description: ''
    post:
      operationId: api_shop_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shop'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shop'
          description: ''
  /api/shop/{id}/:
    get:
      operationId: api_shop_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this shop.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shop'
          description: ''
    put:
      operationId: api_shop_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this shop.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shop'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shop'
          description: ''
    patch:
      operationId: api_shop_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this shop.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedShop'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shop'
          description: ''
    delete:
      operationId: api_shop_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this shop.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/status/:
    get:
      operationId: api_status_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedStatusList'
          description: ''
    post:
      operationId: api_status_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Status'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: ''
  /api/status/{id}/:
    get:
      operationId: api_status_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this status.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: ''
    put:
      operationId: api_status_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this status.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Status'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: ''
    patch:
      operationId: api_status_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this status.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedStatus'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: ''
    delete:
      operationId: api_status_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this status.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/user/:
    get:
      operationId: api_user_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
    post:
      operationId: api_user_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/user/{userId}/:
    get:
      operationId: api_user_retrieve
      parameters:
      - in: path
        name: userId
        schema:
          type: string
        description: A unique value identifying this user.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: api_user_update
      parameters:
      - in: path
        name: userId
        schema:
          type: string
        description: A unique value identifying this user.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: api_user_partial_update
      parameters:
      - in: path
        name: userId
        schema:
          type: string
        description: A unique value identifying this user.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: api_user_destroy
      parameters:
      - in: path
        name: userId
        schema:
          type: string
        description: A unique value identifying this user.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /google/:
    get:
      operationId: google_retrieve
      tags:
      - google
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /reorder/:
    post:
      operationId: reorder_create
      tags:
      - reorder
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /test/:
    post:
      operationId: test_create
      tags:
      - test
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
components:
  schemas:
    Comment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        page:
          type: string
          maxLength: 100
        time:
          type: string
          format: date-time
          nullable: true
        text:
          type: string
          nullable: true
          maxLength: 1000
        parent:
          type: integer
          nullable: true
        user:
          type: integer
        media:
          type: string
      required:
      - id
      - page
    Gallery:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        media:
          type: string
          nullable: true
        viewId:
          type: integer
          nullable: true
        mediaTitle:
          type: string
          nullable: true
        mediaText:
          type: string
          nullable: true
      required:
      - id
    Order:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        page:
          type: string
          nullable: true
        slug:
          type: string
          nullable: true
        media:
          type: string
          nullable: true
        viewId:
          type: integer
          nullable: true
        title:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        user:
          type: integer
          nullable: true
        dateCreated:
          type: string
          format: date-time
          nullable: true
        statusChanged:
          type: string
          format: date-time
          nullable: true
        product:
          type: integer
          nullable: true
        status:
          type: integer
          nullable: true
      required:
      - id
    PaginatedCommentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    PaginatedGalleryList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Gallery'
    PaginatedOrderList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Order'
    PaginatedProductList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Product'
    PaginatedShopList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Shop'
    PaginatedStatusList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Status'
    PaginatedUserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PatchedComment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        page:
          type: string
          maxLength: 100
        time:
          type: string
          format: date-time
          nullable: true
        text:
          type: string
          nullable: true
          maxLength: 1000
        parent:
          type: integer
          nullable: true
        user:
          type: integer
        media:
          type: string
    PatchedGallery:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        media:
          type: string
          nullable: true
        viewId:
          type: integer
          nullable: true
        mediaTitle:
          type: string
          nullable: true
        mediaText:
          type: string
          nullable: true
    PatchedOrder:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        page:
          type: string
          nullable: true
        slug:
          type: string
          nullable: true
        media:
          type: string
          nullable: true
        viewId:
          type: integer
          nullable: true
        title:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        user:
          type: integer
          nullable: true
        dateCreated:
          type: string
          format: date-time
          nullable: true
        statusChanged:
          type: string
          format: date-time
          nullable: true
        product:
          type: integer
          nullable: true
        status:
          type: integer
          nullable: true
    PatchedProduct:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        page:
          type: string
          nullable: true
        slug:
          type: string
          nullable: true
        media:
          type: string
          nullable: true
        viewId:
          type: integer
          nullable: true
        name:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        price:
          type: number
          format: double
        productType:
          type: string
          nullable: true
        inStock:
          type: boolean
    PatchedShop:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        product:
          allOf:
          - $ref: '#/components/schemas/Product'
          readOnly: true
        viewId:
          type: integer
          nullable: true
        title:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
    PatchedStatus:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        step:
          type: string
        substep:
          type: string
    PatchedUser:
      type: object
      properties:
        userId:
          type: string
        uuid:
          type: string
        messageToken:
          type: string
          nullable: true
        name:
          type: string
        email:
          type: string
        telegramId:
          type: integer
          nullable: true
        deliveryName:
          type: string
        deliverySurname:
          type: string
        deliveryLastname:
          type: string
        deliveryPhone:
          type: string
        deliveryAddress:
          type: string
        notificationEmail:
          type: boolean
        notificationTelegram:
          type: boolean
        notificationPush:
          type: boolean
    Product:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        page:
          type: string
          nullable: true
        slug:
          type: string
          nullable: true
        media:
          type: string
          nullable: true
        viewId:
          type: integer
          nullable: true
        name:
          type: string
          nullable: true
        summary:
          type: string
          nullable: true
        price:
          type: number
          format: double
        productType:
          type: string
          nullable: true
        inStock:
          type: boolean
      required:
      - id
    Shop:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        product:
          allOf:
          - $ref: '#/components/schemas/Product'
          readOnly: true
        viewId:
          type: integer
          nullable: true
        title:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
      required:
      - id
      - product
    Status:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        step:
          type: string
        substep:
          type: string
      required:
      - id
      - step
      - substep
    User:
      type: object
      properties:
        userId:
          type: string
        uuid:
          type: string
        messageToken:
          type: string
          nullable: true
        name:
          type: string
        email:
          type: string
        telegramId:
          type: integer
          nullable: true
        deliveryName:
          type: string
        deliverySurname:
          type: string
        deliveryLastname:
          type: string
        deliveryPhone:
          type: string
        deliveryAddress:
          type: string
        notificationEmail:
          type: boolean
        notificationTelegram:
          type: boolean
        notificationPush:
          type: boolean
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
